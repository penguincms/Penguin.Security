<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Security</name>
    </assembly>
    <members>
        <member name="T:Penguin.Security.Encryption.AES">
            <summary>
            A class used for encrypting/decrypting data with AES algorithms
            </summary>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.#ctor(System.String)">
            <summary>
            Creates a new instance of the AES encryptor with the specified salt
            </summary>
            <param name="salt">The salt to be used when encrypting/decrypting</param>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the AES encryptor with the specified salt
            </summary>
            <param name="salt">The salt to be used when encrypting/decrypting</param>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.AESDecryptBytes(System.Byte[],System.Security.SecureString,System.Byte[])">
            <summary>
            Decrypts a byte array
            </summary>
            <param name="cryptBytes">The byte array to decrypt</param>
            <param name="password">The password to be used for decryption</param>
            <param name="saltBytes">The salt bytes to be used on the decryption</param>
            <returns>A decrypted byte array</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.AESEncryptBytes(System.Byte[],System.Security.SecureString,System.Byte[])">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="clearBytes">The byte array to encrypt</param>
            <param name="password">The password to be used for encryption</param>
            <param name="saltBytes">The salt bytes to be used on the encryption</param>
            <returns>A encrypted byte array</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.DecryptStringAES(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an AES encrypted string
            </summary>
            <param name="cipherText">The encrypted string</param>
            <param name="sharedSecret">The decryption password</param>
            <param name="salt">The byte array to use for the salt</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.EncryptStringAES(System.String,System.String,System.Byte[])">
            <summary>
            Encrypts a string with AES
            </summary>
            <param name="plainText">The string to encrypt</param>
            <param name="sharedSecret">The decryption password</param>
            <param name="salt">The byte array to use for the salt</param>
            <returns>An encrypted string</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.AESDecryptBytes(System.Byte[],System.Security.SecureString)">
            <summary>
            Decrypts a byte array
            </summary>
            <param name="cryptBytes">The byte array to decrypt</param>
            <param name="password">The password to be used for decryption</param>
            <returns>A decrypted byte array</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.AESEncryptBytes(System.Byte[],System.Security.SecureString)">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="clearBytes">The byte array to encrypt</param>
            <param name="password">The password to be used for encryption</param>
            <returns>A encrypted byte array</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypts an AES encrypted string
            </summary>
            <param name="cipherText">The encrypted string</param>
            <param name="sharedSecret">The decryption password</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Penguin.Security.Encryption.AES.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypts a string with AES
            </summary>
            <param name="plainText">The string to encrypt</param>
            <param name="sharedSecret">The decryption password</param>
            <returns>An encrypted string</returns>
        </member>
        <member name="T:Penguin.Security.Encryption.TeaEncryptor">
            <summary>
            A Tiny Encryptor
            </summary>
        </member>
        <member name="M:Penguin.Security.Encryption.TeaEncryptor.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the encryptor using the specified bytes as a password
            </summary>
            <param name="cryptoBytes"></param>
        </member>
        <member name="M:Penguin.Security.Encryption.TeaEncryptor.Decrypt(System.String)">
            <summary>
            Decryption using Corrected Block TEA (xxtea) algorithm
            </summary>
            <param name="encrypted">String to be decrypted</param>
            <returns>
            - Empty string if the parameter is empty string.
            - Null if the Encrypted string is not Base64
            - Decrypted text if the parameter is valid
            </returns>
        </member>
        <member name="M:Penguin.Security.Encryption.TeaEncryptor.Encrypt(System.String)">
            <summary>
            Encryption using corrected Block TEA (xxtea) algorithm
            </summary>
            <param name="text">String to be encrypted (multi-byte safe)</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Security.Encryption.TeaEncryptor.ToBytes(System.UInt32[])">
            <summary>
            Convert array of longs back to utf-8 byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Penguin.Security.Encryption.TeaEncryptor.ToLongs(System.Byte[])">
            <summary>
            convert utf-8 byte to array of longs, each containing 4 chars to be manipulated
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Penguin.Security.IO.EncryptedFile">
            <summary>
            A class used to hold and access an instance of an encrypted file
            </summary>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.#ctor(System.IO.FileInfo,System.String)">
            <summary>
            Creates a new encrypted file instance
            </summary>
            <param name="file">A fileinfo representing the file</param>
            <param name="salt">The salt used to access the file</param>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.#ctor(System.String,System.String)">
            <summary>
            Creates a new encrypted file instance
            </summary>
            <param name="filePath">The path to the file</param>
            <param name="salt">The salt used to access the file</param>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.#ctor(System.IO.FileInfo,System.Byte[])">
            <summary>
            Creates a new encrypted file instance
            </summary>
            <param name="file">A fileinfo representing the file</param>
            <param name="salt">The salt used to access the file</param>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new encrypted file instance
            </summary>
            <param name="filePath">The path to the file</param>
            <param name="salt">The salt used to access the file</param>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.Delete(System.String,System.Random)">
            <summary>
            Flushes a file with random bytes and then deletes it
            </summary>
            <param name="filePath">The file to delete</param>
            <param name="r">An optional Random to be used to flush the file before deleting</param>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.Delete">
            <summary>
            Flushes and deletes this file instance
            </summary>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.ReadAllBytes(System.Security.SecureString)">
            <summary>
            Decrypts the file and reads back a byte array
            </summary>
            <param name="password">The password for the file</param>
            <returns>A decrypted byte array representing the file contents</returns>
        </member>
        <member name="M:Penguin.Security.IO.EncryptedFile.WriteAllBytes(System.Byte[],System.Security.SecureString)">
            <summary>
            Encrypts a byte array and writes it back to the file
            </summary>
            <param name="bytes">The byte array to write</param>
            <param name="password">The password to use to encrypt the file contents</param>
        </member>
        <member name="T:Penguin.Security.Objects.EncryptionProcess">
            <summary>
            A process used to allow a used to access an encrypted file in a monitored way
            </summary>
        </member>
        <member name="P:Penguin.Security.Objects.EncryptionProcess.OriginalFilePath">
            <summary>
            The source file (encrypted)
            </summary>
        </member>
        <member name="P:Penguin.Security.Objects.EncryptionProcess.TempFilePath">
            <summary>
            The path to the unencrypted temporary instance being run
            </summary>
        </member>
        <member name="P:Penguin.Security.Objects.EncryptionProcess.Watcher">
            <summary>
            A file system watcher intended to monitor file access and persist changes back to the original encrypted version
            </summary>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.#ctor(System.Security.SecureString,System.String,System.String)">
            <summary>
            Creates a new instance of an encrypted proces
            </summary>
            <param name="password">The file password</param>
            <param name="salt">The password salt</param>
            <param name="file">The file path of the encrypted file</param>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.#ctor(System.Security.SecureString,System.Byte[],System.String)">
            <summary>
            Creates a new instance of an encrypted proces
            </summary>
            <param name="password">The file password</param>
            <param name="salt">The password salt</param>
            <param name="file">The file path of the encrypted file</param>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.CleanUp(System.Object,System.EventArgs)">
            <summary>
            Attempts to copy back any changes from the temporary file, and clean up
            </summary>
            <param name="sender">Unused</param>
            <param name="e">Unused</param>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.CleanUp">
            <summary>
            Manual method to delete the temporary file used to access the encrypted file
            </summary>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.IsLocked">
            <summary>
            Checks to see if the temporary file is currently being accessed
            </summary>
            <returns>A bool representing whether or not the temporary file is currently being accessed</returns>
        </member>
        <member name="M:Penguin.Security.Objects.EncryptionProcess.Start">
            <summary>
            Decrypts the file and attempts to launch a program to access the file
            </summary>
            <returns>The running process accessing the file</returns>
        </member>
        <member name="T:Penguin.Security.Objects.SecureStringBytes">
            <summary>
            A class used to access a byte array representation of a secure string
            </summary>
        </member>
        <member name="M:Penguin.Security.Objects.SecureStringBytes.#ctor(System.Security.SecureString)">
            <summary>
            Creates a new holder for this SecureStringBytes
            </summary>
            <param name="secureString">The source secure string</param>
        </member>
        <member name="M:Penguin.Security.Objects.SecureStringBytes.Clear">
            <summary>
            Clears the bytes out of memory
            </summary>
        </member>
        <member name="M:Penguin.Security.Objects.SecureStringBytes.Dispose">
            <summary>
            Calls the clear function to flush out the memory used by this object
            </summary>
        </member>
        <member name="M:Penguin.Security.Objects.SecureStringBytes.GetBytes">
            <summary>
            Gets a byte array representing this secure string
            </summary>
            <returns>A byte array representing this secure string</returns>
        </member>
    </members>
</doc>